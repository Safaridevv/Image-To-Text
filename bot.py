import logging
import pytesseract
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType
from aiogram.utils import executor
from PIL import Image
import os
from config import BOT_TOKEN

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§∏‡•á‡§ü‡§Ö‡§™
logging.basicConfig(level=logging.INFO)

# ‡§¨‡•â‡§ü ‡§î‡§∞ ‡§°‡§ø‡§∏‡•ç‡§™‡•à‡§ö‡§∞ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ‡§´‡•ã‡§ü‡•ã ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§ï‡•á ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
async def extract_text_from_image(image_path):
    try:
        img = Image.open(image_path)
        text = pytesseract.image_to_string(img)
        return text if text.strip() else "‡§ï‡•ã‡§à ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§"
    except Exception as e:
        return f"‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à: {str(e)}"

# ‡§ú‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ ‡§´‡•ã‡§ü‡•ã ‡§≠‡•á‡§ú‡•á
@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: types.Message):
    file_id = message.photo[-1].file_id  # ‡§∏‡§¨‡§∏‡•á ‡§¨‡§°‡§º‡•Ä ‡§ï‡•ç‡§µ‡§æ‡§≤‡§ø‡§ü‡•Ä ‡§ï‡•Ä ‡§á‡§Æ‡•á‡§ú ‡§≤‡•á‡§Ç
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    downloaded_file = await bot.download_file(file_path)
    
    image_path = f"temp_{file_id}.jpg"
    with open(image_path, "wb") as f:
        f.write(downloaded_file.getvalue())

    extracted_text = await extract_text_from_image(image_path)
    os.remove(image_path)  # ‡§ü‡•á‡§Æ‡•ç‡§™ ‡§´‡§æ‡§á‡§≤ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç
    
    await message.reply(f"üìú **‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü:**\n\n```{extracted_text}```", parse_mode="Markdown")

# ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§è‡§ï OCR ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å‡•§ ‡§¨‡§∏ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≠‡•á‡§ú‡•ã, ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§â‡§∏‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§®‡§ø‡§ï‡§æ‡§≤‡§ï‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§≠‡•á‡§ú ‡§¶‡•Ç‡§Å‡§ó‡§æ‡•§")

# ‡§¨‡•â‡§ü ‡§∞‡§® ‡§ï‡§∞‡•á‡§Ç
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
